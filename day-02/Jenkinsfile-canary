pipeline {
  agent {
    kubernetes {
      yaml '''
        apiVersion: v1
        kind: Pod
        metadata:
          labels:
            app: test
        spec:
          serviceAccountName: jenkins
          containers:
          - name: kubectl
            image: joshendriks/alpine-k8s
            command:
            - /bin/cat
            tty: true 
          - name: kaniko
            image: gcr.io/kaniko-project/executor:debug
            command:
            - cat
            tty: true
            volumeMounts:
            - name: kaniko-secret
              mountPath: /kaniko/.docker
          volumes:
          - name: kaniko-secret
            secret:
              secretName: regcred
              items:
                - key: .dockerconfigjson
                  path: config.json
      '''
    }      
  }
  environment{
    DOCKERHUB_USERNAME = "shapai"
    APP_NAME = "myapp"
    IMAGE_NAME = "${DOCKERHUB_USERNAME}" + "/" + "${APP_NAME}"
    IMAGE_TAG = "${BUILD_NUMBER}"
  }
 stages {
    stage('Build Container Image'){
      steps {
        container('kaniko'){
          //sh "/kaniko/executor --context $WORKSPACE --destination $IMAGE_NAME:$IMAGE_TAG"
          sh "/kaniko/executor --dockerfile `pwd`/day-01/Dockerfile --context `pwd` --destination=${IMAGE_NAME}:${IMAGE_TAG} --destination=${IMAGE_NAME}:latest"
        }
      }
    }
   stage('CanaryDeploy') {     
      steps {
        container('kubectl') {
            sh '''
               sed -i "s/<TAG>/${BUILD_NUMBER}/" day-02/canary-deploy-v2.yaml
               #kubectl get pods -n default
               #kubectl get pods -n dev
               #kubectl get pods -n prod
               kubectl apply -f day-02/canary-deploy-v2.yaml
             '''
          //}
        }
      }
    }
stage('SmokeTest') {
    steps {
        script {
            sleep(time: 5)
            int requestCount = 10
            boolean allRequestsSuccessful = true
            for (int i = 0; i < requestCount; i++) {
                def response = httpRequest(
                    url: "http://canary-app.com/",
                    timeout: 30
                )
                if (response.status != 200) {
                    allRequestsSuccessful = false
                    echo "Request ${i + 1} failed with status ${response.status}"
                }
            }
            if (!allRequestsSuccessful) {
                error("Smoke test against canary deployment failed.")
            }
        }
    }
}
stage('Deploy to Prod') {     
      steps {
        input 'Deploy to Production?'
        container('kubectl') {
         // withCredentials([file(credentialsId: 'mykubeconfig', variable: 'KUBECONFIG')]) {
            //sh 'sed -i "s/<TAG>/${BUILD_NUMBER}/" myweb.yaml'
            //sh 'kubectl apply -f myweb.yaml'
            sh '''
               sed -i "s/<TAG>/${BUILD_NUMBER}/" day-02/canary-deploy-v1.yaml
               #kubectl get pods -n default
               #kubectl get pods -n dev
               #kubectl get pods -n prod
               kubectl apply -f day-02/canary-deploy-v1.yaml
             '''
          //}
        }
      }
    }
  }
}
